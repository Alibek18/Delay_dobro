from SQL.board_models import Database_boards
from SQL.operations_models import Database_operations
from SQL.user_models import Database_user


class MyBoardsMessages:

    def __init__(self):
        self.board_gifters = "–î–∞—Ä–∏—Ç–µ–ª–∏:"
        self.no_access_board = "‚ÄºÔ∏è –í—ã –¥–æ–ª–∂–Ω—ã —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é –¥–æ—Å–∫—É –∏ –ø—Ä–æ–π—Ç–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–∏–≥–ª–∞—Å–∏–≤ " \
                               "–Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫!"

    @staticmethod
    def board_names(user_id: int) -> tuple:
        language = Database_user().get_user_data(user_id, ["country"])[0]
        gift_size = {
            "RU": ("100", "200", "400", "800", "1,600", "3,200", "6,400", "12,000", "24,000", "48,000", "100,000",
                   "200,000", "400,000", "800,000", "1,600,000", "3,200,000"),
            "UZ": ("10,000", "20,000", "40,000", "80,000", "160,000", "320,000", "640,000", "1,200,000", "2,400,000",
                   "4,800,000", "10,000,000", "20,000,000", "40,000,000", "80,000,000", "160,000,000", "320,000,000"),
            "BY": ("5", "10", "20", "40", "80", "160", "320", "640", "1,200", "2,400", "4,800", "10,000", "20,000",
                   "40,000", "80,000", "160,000"),
            "KG": ("100", "200", "400", "800", "1,600", "3,200", "6,400", "12,000", "24,000", "48,000", "100,000",
                   "200,000", "400,000", "800,000", "1,600,000", "3,200,000"),
            "KZ": ("500", "1,000", "2,000", "4,000", "8,000", "16,000", "32,000", "64,000", "120,000", "240,000",
                   "480,000", "1,000,000", "2,000,000", "4,000,000", "8,000,000", "16,000,000"),
            "TJ": ("10", "20", "40", "80", "160", "320", "640", "1,200", "2,400", "4,800",
                   "10,000", "20,000", "40,000", "80,000", "160,000", "320,000"),
            "TM": ("5", "10", "20", "40", "80", "160", "320", "640", "1,200", "2,400", "4,800", "10,000", "20,000",
                   "40,000", "80,000", "160,000"),
            "TR": ("20", "40", "80", "160", "320", "640", "1,200", "2,400", "4,800", "10,000", "20,000", "40,000",
                   "80,000", "160,000", "320,000", "640,000"),
            "UA": ("50", "100", "200", "400", "800", "1,600", "3,200", "6,400", "12,000", "24,000", "48,000",
                   "100,000", "200,000", "400,000", "800,000", "1,600,000")
        }
        return (f"–ù–∞—á–∞–ª—å–Ω–∞—è-I üéÅ{gift_size[language][0]}",
                f"–ù–∞—á–∞–ª—å–Ω–∞—è-II üéÅ{gift_size[language][1]}",
                f"–ù–∞—á–∞–ª—å–Ω–∞—è-III üéÅ{gift_size[language][2]}",
                f"–°—Ä–µ–¥–Ω—è—è üéÅ{gift_size[language][3]}",
                f"–ñ–µ–ª–µ–∑–Ω–∞—è üéÅ{gift_size[language][4]}",
                f"–ë—Ä–æ–Ω–∑–æ–≤–∞—è üéÅ{gift_size[language][5]}",
                f"Ô∏è–°–µ—Ä–µ–±—Ä–æ üéÅ{gift_size[language][6]}",
                f"–ù–µ—Ñ—Ä–∏—Ç–æ–≤–∞—è üéÅ{gift_size[language][7]}",
                f"–•—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è üéÅ{gift_size[language][8]}",
                f"–ó–æ–ª–æ—Ç–∞—è üéÅ{gift_size[language][9]}",
                f"Ô∏è–ü–ª–∞—Ç–∏–Ω–∞ üéÅ{gift_size[language][10]}",
                f"–ê–¥–∞–º–∞–Ω—Ç–æ–≤—ã–π üéÅ{gift_size[language][11]}",
                f"–ñ–µ–º—á—É–∂–Ω–∞—è üéÅ{gift_size[language][12]}",
                f"–ê–ª–º–∞–∑–Ω–∞—è üéÅ{gift_size[language][13]}",
                f"–ö—Ä–∏—Å—Ç–∞–ª—å–Ω–∞—è üéÅ{gift_size[language][14]}",
                f"Ô∏è–≠–ª–∏—Ç–Ω–∞—è üéÅ{gift_size[language][15]}")

    @staticmethod
    def my_boards(user_id: int) -> str:
        base = Database_user()
        gifts_received = base.get_user_data(user_id, ['gift_received'])
        return f"üèÜ –°–ø–∏—Å–æ–∫ –¥–æ—Å–æ–∫ –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ üèÜ\n\nüéÅ –í–∞—à–∏ –ø–æ–¥–∞—Ä–∫–∏: {gifts_received[0]} —Ä—É–±."

    @staticmethod
    def accept_board(user_id: int) -> str:
        base = Database_user()
        father_id = base.get_user_data(user_id, ["father_id"])[0]
        father_login, father_phone = base.get_user_data(father_id, ["username", "user_phone"])
        return f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!!!\n\n‚ÄºÔ∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à–µ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞ –Ω–∞ –¥–æ—Å–∫–µ.\n\n" \
               f"üî∏ –õ–æ–≥–∏–Ω –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞: @{father_login}\nüî∏ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {father_phone}\n\n" \
               f"‚úÖ –ï—Å–ª–∏ –Ω–∞ –¥–æ—Å–∫–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç, –≤—ã –ø–æ–ø–∞–¥–µ—Ç–µ –Ω–∞ –¥–æ—Å–∫—É –∫ –µ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É –∏–ª–∏ –µ—â—ë " \
               f"–≤—ã—à–µ.\n\n"

    @staticmethod
    def board(user_id: int, board_id: str, place: str) -> str:
        base, b_base, o_base = Database_user(), Database_boards(), Database_operations()
        boards = ("üî¥–ù–∞—á–∞–ª—å–Ω–∞—è-I", "‚≠ïÔ∏è–ù–∞—á–∞–ª—å–Ω–∞—è-II", "‚ô¶Ô∏è–ù–∞—á–∞–ª—å–Ω–∞—è-III", "üü§–°—Ä–µ–¥–Ω—è—è", "üåë–ñ–µ–ª–µ–∑–Ω–∞—è", "üü†–ë—Ä–æ–Ω–∑–æ–≤–∞—è",
                  "‚ö™Ô∏è–°–µ—Ä–µ–±—Ä–æ", "üü¢–ù–µ—Ñ—Ä–∏—Ç–æ–≤–∞—è", "üåÄ–•—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è", "üü°–ó–æ–ª–æ—Ç–∞—è", "‚ö´Ô∏è–ü–ª–∞—Ç–∏–Ω–∞", "üîµ–ê–¥–∞–º–∞–Ω—Ç–æ–≤–∞—è",
                  "ü´ß–ñ–µ–º—á—É–∂–Ω–∞—è", "üíé–ê–ª–º–∞–∑–Ω–∞—è", "üç∏–ö—Ä–∏—Å—Ç–∞–ª—å–Ω–∞—è", "‚≠êÔ∏è–≠–ª–∏—Ç–Ω–∞—è")
        places = {"gifter0": "–î–∞—Ä–∏—Ç–µ–ª—å", "gifter1": "–î–∞—Ä–∏—Ç–µ–ª—å", "gifter2": "–î–∞—Ä–∏—Ç–µ–ª—å", "gifter3": "–î–∞—Ä–∏—Ç–µ–ª—å",
                  "builder1": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å", "builder2": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å", "king": "–ü–æ–ª—É—á–∞—Ç–µ–ª—å"}
        board_info = b_base.find_board(board_id)
        board_index = int(board_info[0][-1])
        gifter_count = len([x for x in board_info[2:6] if x is not None])
        partners_count = base.count_partners_on_board(user_id, board_info)
        approve_gifts_count = o_base.get_count_of_approved_gifts_on_board(board_id)
        boards_access = base.get_boards_access(user_id)[1:]
        if len(set(boards_access)) == 1:
            kvalification = "‚úÖ"
        else:
            kvalification = "‚úÖ" if boards_access[board_index + 1] == True else "‚ùå"
        return f"‚ùáÔ∏è –î–æ—Å–∫–∞ - {boards[board_index]}\n" \
               f"‚öúÔ∏è ID –î–æ—Å–∫–∏: {board_info[1]}\n" \
               f"üë• –î–∞—Ä–∏—Ç–µ–ª–µ–π –Ω–∞ –¥–æ—Å–∫–µ: {gifter_count}\n" \
               f"üéÅ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {approve_gifts_count} –∏–∑ 4\n" \
               f"üìç –ú–µ—Å—Ç–æ: {places.get(place)}\n" \
               f"üîë –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è: {kvalification}\n" \
               f"üöª –ü–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –Ω–∞ –¥–æ—Å–∫–µ: {partners_count}\n"
               # f"üîÅ –ü—Ä–æ–π–¥–µ–Ω–æ –¥–æ—Å–æ–∫ <i>count board complete</i>"

    @staticmethod
    def king_data(board_id: str, user_id: int):
        base, b_base, o_base = Database_user(), Database_boards(), Database_operations()
        king_id = b_base.get_board_data(board_id, ["uid", "king"])[1]
        king_data = base.get_user_data(king_id, ["username", "user_full_name", "user_phone", "father_id"])
        father_username = base.get_user_data(king_data[3], ["username"])[0]
        board_info = b_base.find_board(board_id)
        partners_count = base.count_partners_on_board(king_id, board_info)
        language = base.get_user_data(user_id, ["country"])[0]
        summ_dict = {
            "RU": ("100", "200", "400", "800", "1,600", "3,200", "6,400", "12,000", "24,000", "48,000", "100,000",
                   "200,000", "400,000", "800,000", "1,600,000", "3,200,000"),
            "UZ": ("10,000", "20,000", "40,000", "80,000", "160,000", "320,000", "640,000", "1,200,000", "2,400,000",
                   "4,800,000", "10,000,000", "20,000,000", "40,000,000", "80,000,000", "160,000,000", "320,000,000"),
            "BY": ("5", "10", "20", "40", "80", "160", "320", "640", "1,200", "2,400", "4,800", "10,000", "20,000",
                   "40,000", "80,000", "160,000"),
            "KG": ("100", "200", "400", "800", "1,600", "3,200", "6,400", "12,000", "24,000", "48,000", "100,000",
                   "200,000", "400,000", "800,000", "1,600,000", "3,200,000"),
            "KZ": ("500", "1,000", "2,000", "4,000", "8,000", "16,000", "32,000", "64,000", "120,000", "240,000",
                   "480,000", "1,000,000", "2,000,000", "4,000,000", "8,000,000", "16,000,000"),
            "TJ": ("10", "20", "40", "80", "160", "320", "640", "1,200", "2,400", "4,800",
                   "10,000", "20,000", "40,000", "80,000", "160,000", "320,000"),
            "TM": ("5", "10", "20", "40", "80", "160", "320", "640", "1,200", "2,400", "4,800", "10,000", "20,000",
                   "40,000", "80,000", "160,000"),
            "TR": ("20", "40", "80", "160", "320", "640", "1,200", "2,400", "4,800", "10,000", "20,000", "40,000",
                   "80,000", "160,000", "320,000", "640,000"),
            "UA": ("50", "100", "200", "400", "800", "1,600", "3,200", "6,400", "12,000", "24,000", "48,000",
                   "100,000", "200,000", "400,000", "800,000", "1,600,000")
        }
        currency = {
            "RU": "–†–£–ë|RUB", "UZ": "–°—É–º", "BY": "–†–£–ë|BYN", "KG": "–°–æ–º", "KZ": "–¢–µ–Ω–≥–µ", "TJ": "–°–æ–º–æ–Ω–∏", "TM": "–ú–∞–Ω–∞—Ç",
            "TR": "–õ–∏—Ä–∞", "UA": "–ì—Ä–∏–≤–Ω–∞"
        }
        is_sent_gift = o_base.is_sent_gift_to_king(board_id, user_id, king_id)
        if is_sent_gift == 0 or is_sent_gift == "Not confirmed":
            gift_msg = f"–°—É–º–º–∞ –∫ –¥–∞—Ä–µ–Ω–∏—é: {summ_dict[language][int(board_info[0][-1])]} {currency[language]}"
        elif is_sent_gift == "Confirmed":
            gift_msg = f"–ü–æ–¥–∞—Ä–µ–Ω–æ: {summ_dict[language][int(board_info[0][-1])]} {currency[language]}"
        elif is_sent_gift == "Waiting":
            gift_msg = f"–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤–∞—à–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞" \
                       f" {summ_dict[language][int(board_info[0][-1])]} {currency[language]}"
        else:
            gift_msg = "<i>system_error</i>"
        return f"üîë –õ–æ–≥–∏–Ω: @{king_data[0]}\n" \
               f"üôÇ –ò–º—è: {king_data[1]}\n" \
               f"‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: {king_data[2]}\n" \
               f"ü§ù –ö—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª: @{father_username}\n" \
               f"‚ú≥Ô∏è –ü–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –Ω–∞ –¥–æ—Å–∫–µ: {partners_count}\n" \
               f"üéÅ {gift_msg}"

    @staticmethod
    def board_family(board_info: tuple) -> str:
        base, b_base = Database_user(), Database_boards()
        message = ""
        for i in range(7):
            if board_info[i + 2] is not None:
                username, user_full_name, father_id = base.get_user_data(board_info[i + 2],
                                                                         ["username", "user_full_name",
                                                                          "father_id"])
                father_username = base.get_user_data(father_id, ["username"])[0]
                partners_count = base.count_partners_on_board(board_info[i + 2], board_info)
                if i + 2 in [2, 3, 4, 5]:
                    status = "ü•á –î–∞—Ä–∏—Ç–µ–ª—å"
                elif i + 2 in [6, 7]:
                    status = "ü•à –°—Ç—Ä–æ–∏—Ç–µ–ª—å"
                elif i + 2 == 8:
                    status = "üèµ –ü–æ–ª—É—á–∞—Ç–µ–ª—å"
                else:
                    status = ""
                board_index = int(board_info[0][-1])
                boards_access = base.get_boards_access(board_info[i + 2])[1:]
                if len(set(boards_access)) == 1:
                    kvalification = "‚úÖ"
                else:
                    kvalification = "‚úÖ" if boards_access[board_index + 1] == True else "‚ùå"
                message += f"üèÜ–°—Ç–∞—Ç—É—Å: {status}\n" \
                           f"üîë–õ–æ–≥–∏–Ω: @{username}\n" \
                           f"üë§–ò–º—è: {user_full_name}\n" \
                           f"üéì–ö—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª: @{father_username}\n" \
                           f"üîë –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è: {kvalification}\n" \
                           f"üë•–ü–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –Ω–∞ –¥–æ—Å–∫–µ: {partners_count}\n\n"
                           # f"üîÅ –ü—Ä–æ–π–¥–µ–Ω–æ –¥–æ—Å–æ–∫: <i>count boards complete</i>\n\n"
        return message

    @staticmethod
    def gifter_data(gifter_id: str, board_id: str) -> str:
        base, b_base = Database_user(), Database_boards()
        username, user_full_name, father_id = base.get_user_data(int(gifter_id), ["username", "user_full_name",
                                                                                  "father_id"])
        father_username = base.get_user_data(father_id, ["username"])[0]
        board_info = b_base.find_board(board_id)
        partners_count = base.count_partners_on_board(int(gifter_id), board_info)
        return f"üë§–ò–º—è: {user_full_name}\n" \
               f"üîë–õ–æ–≥–∏–Ω: @{username}\n" \
               f"üéì–ö—Ç–æ –ü—Ä–∏–≥–ª–∞—Å–∏–ª: @{father_username}\n" \
               f"üë•–ü–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –Ω–∞ –¥–æ—Å–∫–µ: {partners_count}"

    @staticmethod
    def gifter_added(user_id: int, board_index: str, board_id: str) -> str:
        base = Database_user()
        username = base.get_user_data(user_id, ["username"])
        boards = ("üî¥–ù–∞—á–∞–ª—å–Ω–∞—è-I", "‚≠ïÔ∏è–ù–∞—á–∞–ª—å–Ω–∞—è-II", "‚ô¶Ô∏è–ù–∞—á–∞–ª—å–Ω–∞—è-III", "üü§–°—Ä–µ–¥–Ω—è—è", "üåë–ñ–µ–ª–µ–∑–Ω–∞—è", "üü†–ë—Ä–æ–Ω–∑–æ–≤–∞—è",
                  "‚ö™Ô∏è–°–µ—Ä–µ–±—Ä–æ", "üü¢–ù–µ—Ñ—Ä–∏—Ç–æ–≤–∞—è", "üåÄ–•—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è", "üü°–ó–æ–ª–æ—Ç–∞—è", "‚ö´Ô∏è–ü–ª–∞—Ç–∏–Ω–∞", "üîµ–ê–¥–∞–º–∞–Ω—Ç–æ–≤–∞—è",
                  "ü´ß–ñ–µ–º—á—É–∂–Ω–∞—è", "üíé–ê–ª–º–∞–∑–Ω–∞—è", "üç∏–ö—Ä–∏—Å—Ç–∞–ª—å–Ω–∞—è", "‚≠êÔ∏è–≠–ª–∏—Ç–Ω–∞—è")
        return "üòª –ù–∞ –≤–∞—à—É –¥–æ—Å–∫—É –ø—Ä–∏—Å–æ–µ–¥–∏–ª—Å—è –î–∞—Ä–∏—Ç–µ–ª—å!\n\n" \
               f"üîë –õ–æ–≥–∏–Ω: @{username[0]}\n" \
               f"ü•á –¢–∏–ø –¥–æ—Å–∫–∏: {boards[int(board_index)]}\n" \
               f"üìç ID –¥–æ—Å–∫–∏: {board_id}\n\n" \
               f"üéØ –£—Å–ø–µ–≤–∞–π—Ç–µ –∑–∞–Ω—è—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞!"
